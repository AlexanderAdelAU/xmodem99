                        
                        ;
                        ;****************************************
                        ;
                        ;	NAME XMODEM
                        ;	PURPOSE : TO TRANSFER FILES BETWEEN MACHINES
                        ;	USING THE XMODEM PROTOCOL.  WRITTEN BY ALEXANDER CAMERON
                        ;	VERSION 1.3	14TH MAY 2020 - DURING THE COVID-19 PANDEMIC IN ADELAIDE
                        ;	VERSION 1.4	24TH MAY 2020 - ADDED SECTOR BY SECTOR DIRECT WRITING TO DISC
                        ;
                        ;	USAGE:  XMODEM <FILENAME> {NO OPTION LIST AT PRESENT}
                        ;
                        ;
                        ; -------- 3. MESSAGE BLOCK LEVEL PROTOCOL
                        
                        ;Link to this description;  http://textfiles.com/programming/ymodem.txt
                        ;
                        ; Each block of the transfer looks like:
                        ; <SOH><blk #><255-blk #><--128 data bytes--><cksum>
                        ;    in which:
                        ;
                        ; <SOH>       = 01 hex
                        ; <blk #>     = binary number, starts at 01 increments by 1, and
                        ;               wraps 0FFH to 00H (not to 01)
                        ; <255-blk #> = blk # after going thru 8080 "CMA" instr.
                        ;               Formally, this is the "ones complement".
                        ; <cksum>     = the sum of the data bytes only.  Toss any carry.
                        ;
                        ;
                        ;  SENDER                           RECEIVER
                        ;                                   Times out after 20 seconds,
                        ;                           <---    <nak>
                        ;  <soh> 01 FE -data- <xx>   --->
                        ;                           <---    <ack>
                        ;  <soh> 02 FD -data- <xx>   --->   (data gets line hit)
                        ;                           <---    <nak>
                        ;  <soh> 02 FD -data- <xx>   --->
                        ;                           <---    <ack>
                        ;  <soh> 03 FC -data- <xx>   --->   (ack gets garbaged)    <---    <ack>
                        ;  <soh> 03 FC -data- <xx>   --->
                        ;                           <---    <ack>
                        ;  <eot>                     --->
                        ;                           <---    <ack>
                        ;
                        ;
                        ;**************************************
                        ;
                        ; THESE XOP ARE DEFINED IN THE MONITOR.   
                        ; NOTE XOP WORSPACES ARE OVERLAPPED 
                        ; SO THAT ALL REGISTERS R0 TO R7 ARE SHARED.
                        ;
                        ;
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8
                        	DXOP	POP,9
                        	DXOP	WHEX,10		;WRITE OUT A 16 BIT HEX VALUE
                        	DXOP	RHEX,11		;READ IN A 16 BIT HEX VALUE
                        	DXOP	WRITE,12		;WRITE CHAR IN MSB
                        	DXOP	READ,13		;READ CHAR IN MSB
                        	DXOP	MESG,14		;OUTPUT NULL TERMINATED MESSAGE
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
  0007                  R7	EQU	7
  0008                  R8	EQU	8
  0009                  SL	EQU	9
  000A                  SP	EQU	10
  000B                  R11	EQU	11
  000C                  R12	EQU	12
  000D                  R13	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
                        ;
                        ;
                        ;	BDOS EQUATES	
                        ;
  0500                  TPA	EQU	0500H		;DEFAULT START ADDRESS
  0084                  BDOS	EQU	84H		;BDOS VECTORS.
  0080                  SHELL	EQU	80H		;SHELL VECTOR
  00A0                  CMDLINE	EQU	0A0H		;SHELL COMMAND LINE POINTER
                        
  000B                  NAMSIZ	EQU	11		;DIRECTORY NAME SIZE
  000E                  SELDSK	EQU	14
  000F                  OPEN	EQU	15
  0010                  FCLOSE	EQU	16
  0013                  ERAFIL	EQU	19
  0016                  MAKFIL	EQU	22
  0015                  WRSEQ	EQU	21
  001A                  SETDMA	EQU	26
                        ;
                        ;---FCB	EQUATES
                        ;
  0000                  NAM	EQU	0
  000B                  FTY	EQU	11
  0010                  FLA	EQU	16
  000C                  FSB	EQU	12
  000E                  FSZ	EQU	14
  001A                  CRN	EQU	26
                        ;
                        ;
  0500                  	AORG	TPA
  0500   1004           	JMP	START
                        ;
                        ;	MISC DEFINITIONS
                        ;
  0502   20             SPACE	BYTE	20H
  0503   2D             SWITCH	BYTE	'-'		;COMMAND LINE SWITCH
  0200                  BYTSEC	EQU	512
  0080                  RECSIZE 	EQU	128
  0504   0004           REC_COUNT	WORD	4		;THIS ASSUME 4 128 BYTE RECORDS PER BLOCK
                        ;
                        ;
  0506   0460 05AA      CMD_ERROR:	B	@CMDERR
                        
  050A   02E0 0B1A      START:	LWPI	WORKSP
  050E   020A 0B58      	LI	SP,STACKP
  0512   2FA0 06C6      	MESG	@VERSION
  0516   2FA0 05F8      	MESG	@CRLF
  051A   C120 00A0      	MOV	@CMDLINE,R4		;GET CMD BUFFER POINTER
                        START01
  051E   9834 0502      	CB	*R4+,@SPACE	 	;LOOK FOR SPACES BETWEEN COMMAND ARGS
  0522   1AF1           	JL	CMD_ERROR
  0524   16FC           	JNE	START01
  0526   0604           	DEC	R4	 	;BACK UP TO 1ST CHAR
                        ;
  0528   9834 0502      START02	CB	*R4+,@SPACE		;NOW JUMP OVER SPACES
  052C   12FD           	JLE	START02
  052E   0604           	DEC	R4
  0530   C804 0914      	MOV	R4,@LINPTR
  0534   C0C4           	MOV	R4,R3		;R3->NAME
  0536   0200 000B      	LI	R0,NAMSIZ 		;FCB COUNTER
  053A   0208 08F0      	LI	R8,FCB	  	;
  053E   C088           	MOV	R8,R2	 	;SAVE FCB
  0540   9813 0502      NAM0	CB	*R3,@SPACE	 	;END OF NAME ?
  0544   1204           	JLE	NAM4	 	;YES
  0546   DCB3           	MOVB	*R3+,*R2+		;STORE IN FCB
  0548   0600           	DEC	R0
  054A   16FA           	JNE	NAM0
  054C   1004           	JMP	GOT_NAME
  054E   DCA0 0502      NAM4	MOVB	@SPACE,*R2+	 	;PAD WITH SPACES
  0552   0600           	DEC	R0
  0554   16FC           	JNE	NAM4
                        ;
                        ; CREATE THE NAMED FILE
                        ;
  0556   0202 000E      GOT_NAME:	LI	R2,SELDSK
  055A   04C3           	CLR	R3
  055C   2DA0 0084      	CALL	@BDOS		;SELECT DRIVE A
  0560   0202 0013      	LI	R2,ERAFIL 		;PURGE IF ALREADY EXITS
  0564   0203 08F0      	LI	R3,FCB
  0568   2DA0 0084      	CALL	@BDOS
  056C   0202 0016      	LI	R2,MAKFIL
  0570   0203 08F0      	LI	R3,FCB
  0574   2DA0 0084      	CALL	@BDOS	 	;TRY TO MAKE THE FILE
  0578   C041           	MOV	R1,R1	 	;SUCCESS ?
  057A   1113           	JLT	MKERR	 	;MAKE ERROR
  057C   04C0           	CLR	R0
  057E   0203 08F0      	LI	R3,FCB
  0582   D8C0 000B      	MOVB	R0,@FTY(R3)		;ZERO SAYS DONT CARE
  0586   C8C0 001A      	MOV	R0,@CRN(R3)		;BEGIN AT FIRST RECORD
  058A   0200 0500      	LI	R0,TPA		;ASSUME TPA
  058E   C8C0 0010      	MOV	R0,@FLA(R3)		;INTO LOAD ADDRESS
                        ;
                        ;	BEGIN RECEIVING THE FILE BY LOADING INTO THE BUFFER
                        ;	WRITE SECTOR BY SECTOR TO DISC
                        ;
  0592   2DA0 0746      	CALL	@RECV_FILE		;RECEIVE THE FILE AND WRITE IT SECTOR BY SECTOR
  0596   2DA0 05B6      	CALL	@CLOSE_FILE
  059A   2FA0 06F4      	MESG	@SUCCESS
  059E   0460 05CE      	B	@EXIT
                        ;
                        ;=======================================================
                        ;
                        ;	ERROR CREATING FILE, SHOW MESSAGE THEN EXIT
                        ;
                        ;=======================================================
  05A2   0200 061E      MKERR:	LI	R0,MAKMSG
  05A6   0460 0842      	B	@LOAD_END
                        
                        ;
                        ;  TERMINATE THE PROCESS
                        ;
  05AA   0200 05FC      CMDERR:	LI	R0,CMDMSG
  05AE   2FA0 05FC      	MESG	@CMDMSG
  05B2   0460 0842      	B	@LOAD_END
                        ;
                        ;=======================================================
                        ;
                        ;	CLOSE THE FILE, IF SECTOR BUFFER HAS RECEIVED DATA
                        ;	THEN FLUSH WITH A CALL TO wRITE_SECTOR
                        ;
                        ;=======================================================
                        CLOSE_FILE:
  05B6   C020 0504      	MOV	@REC_COUNT,R0
  05BA   1302           	JEQ	CLS_1
  05BC   2DA0 05D4      	CALL	@WRITE_SECTOR	;FLUSH AND WRITE ALL
                        
  05C0   0202 0010      CLS_1:	LI	R2,FCLOSE	 	;NOW CLOSE THE FILE
  05C4   0203 08F0      	LI	R3,FCB
  05C8   2DA0 0084      	CALL	@BDOS
  05CC   2DC0           	RET
                        ;
  05CE   04C1           EXIT:	CLR	R1		;RETURN CODE FOR SHELL
  05D0   0460 0080      	B	@SHELL		;NEED TO CALL SHELL INIT BECAUSE WE HAVE ALTERED WP
                        ;
                        ;****************************************************************************
                        ;
                        ; WRITE 2 SECTOR'S WORTH OF DATA I.E. BASED ON 512 BYTE SECTORS ON THE DISC
                        ;
                        ;*****************************************************************************
                        ;
                        WRITE_SECTOR:
                        ;	LI	R2,SELDSK
                        ;	CLR	R3
                        ;	CALL	@BDOS
  05D4   0203 0918      	LI	R3,SECTOR_BUFFER
  05D8   0202 001A      	LI	R2,SETDMA
  05DC   2DA0 0084      	CALL	@BDOS
  05E0   0202 0015      	LI	R2,WRSEQ
  05E4   0203 08F0      	LI	R3,FCB
  05E8   2DA0 0084      	CALL	@BDOS
  05EC   04C1           	CLR	R1
  05EE   C041           	MOV	R1,R1	 		;WRITE ERROR ?
  05F0   1101           	JLT	WS_E	 		;YES
  05F2   2DC0           	RET
  05F4   0460 083C      WS_E:	B	@WRITE_ERROR
                        ;	
                        ;
                        ; ERROR MESSAGE AND HANDLING
                        ;
  05F8   0D0A 00        CRLF	BYTE	0DH,0AH,0
  05FB   00             	EVEN
  05FC   2A2A 2055      CMDMSG	TEXT	"** USAGE: XMODEM <FILENAME> **"
  0600   5341 4745      
  0604   3A20 584D      
  0608   4F44 454D      
  060C   203C 4649      
  0610   4C45 4E41      
  0614   4D45 3E20      
  0618   2A2A           
  061A   0D0A 00        	BYTE	0DH,0AH,0
  061D   00             	EVEN
                        
  061E   2A2A 2046      MAKMSG	TEXT	"** FILE CREATE ERROR **"
  0622   494C 4520      
  0626   4352 4541      
  062A   5445 2045      
  062E   5252 4F52      
  0632   202A 2A        
  0635   0D0A 00        	BYTE	0DH,0AH,0
  0638                  	EVEN
                        WRITE_MESSAGE
  0638   2A2A 204F      	TEXT	"** OUTPUT FILE WRITE ERROR **"
  063C   5554 5055      
  0640   5420 4649      
  0644   4C45 2057      
  0648   5249 5445      
  064C   2045 5252      
  0650   4F52 202A      
  0654   2A             
  0655   0D0A 00        	BYTE	0DH,0AH,0
  0658                  	EVEN
  0658   0D0A           MDMMSG  	BYTE	0DH,0AH
  065A   2A2A 2046      	TEXT	"** FATAL LOAD ERROR **"
  065E   4154 414C      
  0662   204C 4F41      
  0666   4420 4552      
  066A   524F 5220      
  066E   2A2A           
  0670   00             	BYTE	0
  0671   00             	EVEN
                        SECT_ERROR_MSG
  0672   0D0A           	BYTE	0DH,0AH
  0674   2A2A 2052      	TEXT	"** RECEIVE SECTOR ERROR **"
  0678   4543 4549      
  067C   5645 2053      
  0680   4543 544F      
  0684   5220 4552      
  0688   524F 5220      
  068C   2A2A           
  068E   0D0A 00        	BYTE	0DH,0AH,0
  0691   00             	EVEN
                        
                        SEQ_ERROR_MSG
  0692   0D0A           	BYTE    0DH,0AH
  0694   2A2A 2053      	TEXT	"** SECTOR OUT OF SEQUENCE ERROR **"
  0698   4543 544F      
  069C   5220 4F55      
  06A0   5420 4F46      
  06A4   2053 4551      
  06A8   5545 4E43      
  06AC   4520 4552      
  06B0   524F 5220      
  06B4   2A2A           
  06B6   0D0A 00        	BYTE	0DH,0AH,0
  06B9   00             	EVEN
                        END_MESSAGE
  06BA   4C4F 4144      	TEXT	"LOAD_END"
  06BE   5F45 4E44      
  06C2   0D0A 00        	BYTE	0DH,0AH,0
  06C5   00             	EVEN
  06C6   4D4F 4445      VERSION	TEXT	"MODEM VERSION 1.5 - READY."
  06CA   4D20 5645      
  06CE   5253 494F      
  06D2   4E20 312E      
  06D6   3520 2D20      
  06DA   5245 4144      
  06DE   592E           
  06E0   0D0A 00        	BYTE	0DH,0AH,0
  06E3   00             	EVEN
  06E4   5341 5649      SAVING	TEXT	"SAVING FILE.."
  06E8   4E47 2046      
  06EC   494C 452E      
  06F0   2E             
  06F1   0D0A 00        	BYTE	0DH,0AH,0
  06F4                  	EVEN
  06F4   5355 4343      SUCCESS	TEXT	"SUCCESS."
  06F8   4553 532E      
  06FC   0D0A 00        	BYTE	0DH,0AH,0
  06FF   00             	EVEN
                        CLOSE_MESSAGE
  0700   2A2A 2A45      	TEXT	"***ERROR CLOSING FILE ***"
  0704   5252 4F52      
  0708   2043 4C4F      
  070C   5349 4E47      
  0710   2046 494C      
  0714   4520 2A2A      
  0718   2A             
  0719   0D0A 00        	BYTE	0DH,0AH,0
  071C                  	EVEN
                        LARGE_FILE_MSG
  071C   2A2A 2A45      	TEXT	"***ERROR CLOSING FILE ***"
  0720   5252 4F52      
  0724   2043 4C4F      
  0728   5349 4E47      
  072C   2046 494C      
  0730   4520 2A2A      
  0734   2A             
  0735   0D0A 00        	BYTE	0DH,0AH,0
  0738                  	EVEN
                        ERR_MSG_ADDR
  0738   0000                   WORD    0   ;ADDRESS OF MESSAGE TO BE OUTPUT
                        
                        
                        
                        ;CLOSERR	MESG	@CLOSE_MESSAGE		;IF WE DONT CLOSE UNUSED BLOCKS MAY
                        ;	JMP	MKERR			;BE STILL ALLOCATED	
                        ;LARGERR	MESG	@LARGE_FILE_MSG
                        ;	JMP	MKERR
                        	
                        ;
                        ;	
                        ;  LOAD THE RECIEVED FILE OR MODULE INTO MEMDORY
                        ;
  073A   15             NAK		BYTE	15H
  073B   06             ACK		BYTE	06H
  073C   01             SOH		BYTE	01H
  073D   04             EOT		BYTE	04H
  073E   17             ETB		BYTE	017H
  073F   18             CAN		BYTE	018H
  0740   00             NULL		BYTE	000H
  0741   00             RECVD_SECT_NO	BYTE	0		;RECEIVED RECORD NUMBER	
  0742   00             COMP_REC_NO		BYTE	0		;INVERED NUMBER OF RECEIVED RECORD NUMBER
  0743   00             SECTNO		BYTE	0		;PREVIOUS RECEIVED RECORD NUMBER
  0744   00             CHECKSUM		BYTE	0
  0745   FF             REC_TIME_OUT	BYTE	0FFH
  0746                  		EVEN
                        ;
                        RECV_FILE:
  0746   0204 0918      	LI	R4,SECTOR_BUFFER
  074A   04C0           	CLR	R0
  074C   C800 0743      	MOV	R0,@SECTNO		; MUST BEGIN THIS AT ZERO 
                        ;
                        ;
                        ; THIS IS THE MAIN RECEIVE LOOP
                        ;
                        
  0750   0200 0020      RECV_LOOP:	LI	R0,32		;RETRY COUNTER.  THIS WILL DETERMINE HOW LONG TO WAIT FOR USER TO START TRANSFER.
  0754   C800 082E      	MOV	R0,@RETRY
                        
  0758   0202 000E      RECV_HDR:	LI	R2,SELDSK		;WE NEED TO DO THIS TO KEEP THE DISC SELECTED, DON'T LIKE IT BUT...
  075C   04C3           	CLR	R3
  075E   2DA0 0084      	CALL	@BDOS
                        
  0762   0201 0008      	LI	R1,8
  0766   2DA0 087A      	CALL	@RECV_WAIT		;LOOP UNTIL SENDER DONE BEFORE SENDING NAK
  076A   9802 0745      	CB	R2,@REC_TIME_OUT	;TIMEOUT ERROR ?
  076E   160F           	JNE	RHNTO		;NO TIMEOUT,
                        
                        RECV_SECT_ERR:
  0770   0201 0020      	LI	R1,32
  0774   2DA0 087A      	CALL	@RECV_WAIT		;LOOP UNTIL SENDER DONE BEFORE SENDING NAK
  0778   9802 0745      	CB	R2,@REC_TIME_OUT	;TIMEOUT ERROR ?
  077C   16F9           	JNE	RECV_SECT_ERR	;NO, THEN STILL STUFF ARRIVING
  077E   0620 082E      	DEC	@RETRY
  0782   1359           	JEQ	SECTOR_ERROR 	;FORCE AND END
  0784   D0A0 073A      	MOVB	@NAK,R2
  0788   2DA0 08C0      	CALL	@TX
  078C   10E5           	JMP	RECV_HDR
                        ;
                        ; GOT CHAR MUST BE SOH
                        ;        
  078E   9802 073C      RHNTO:	CB	R2,@SOH
  0792   1304           	JEQ	GOT_SOH
  0794   9802 073D      	CB	R2,@EOT
  0798   136B           	JEQ	GOT_EOT
                        
                        ;
                        ;  WE DIDN'T RECEIVE SOH
                        ;
  079A   10EA           	JMP	RECV_SECT_ERR
                        ;
                        ; WE HAVE SOH NOW SO BEGIN RECEIVING RECORD OF DATA
                        ;
                        GOT_SOH:
  079C   0201 0002      	LI	R1,2		;ZERO WAIT TIME
  07A0   2DA0 087A      	CALL	@RECV_WAIT		;GET RECORD NUMBER
  07A4   D802 0741      	MOVB	R2,@RECVD_SECT_NO	;
  07A8   04C1           	CLR	R1		;ZERO WAIT TIME
  07AA   2DA0 087A      	CALL	@RECV_WAIT		;GET INVERTED RECORD NUMBER
  07AE   D802 0742      	MOVB	R2,@COMP_REC_NO
                        ;
                        ; NOW GET 128 BYTES OF DATA
                        ;
  07B2   0206 0080      	LI	R6,RECSIZE		;BLOCK SIZE
  07B6   04C5           	CLR	R5		;CHECKSUM
                        
                        NEXT_CHR:
  07B8   0201 0002      	LI	R1,2		;NOMINAL WAIT TIME
  07BC   2DA0 087A       	CALL	@RECV_WAIT
  07C0   DD02           	MOVB	R2,*R4+			;UPDATE THE RECORD POINTER
  07C2   B142           	AB	R2,R5			;UPDATE THE CHECKSUM
  07C4   0606           	DEC	R6			;COUNT DOWN THE NUMBER OF BYTES
  07C6   16F8           	JNE	NEXT_CHR
                        ;
                        ; WAIT FOR CHECKSUM TO BE RECEIVED
                        ;
  07C8   0201 0002      	LI	R1,2		;NOMINAL WAIT TIME
  07CC   2DA0 087A      	CALL	@RECV_WAIT		;GET CHECKSUM INTO R2
  07D0   D802 0744      	MOVB	R2,@CHECKSUM
  07D4   0224 FF80      	AI	R4,-RECSIZE		;ASSUME ERROR SO BACK UP POINTER
                        
                        ;
                        ; CHECK WE HAVE CONSISTENT RECORD NUMBERS AND CHECKSUMS BETWEEN
                        ; BOTH SENDER AND RECEIVER
                        ;
  07D8   D020 0741      	MOVB	@RECVD_SECT_NO,R0
  07DC   0540           	INV	R0			;INVERT RECORD 1
  07DE   9800 0742      	CB	R0,@COMP_REC_NO		;INVERTED VALUE OF RECVD SECT NUMBER
  07E2   16C6           	JNE	RECV_SECT_ERR		;BAD RECORD SO TRY AGAIN
  07E4   9142           	CB	R2,R5			;CHECKSUMS MATCH ?
  07E6   16C4           	JNE	RECV_SECT_ERR		;CHECKSUMS DON'T MATCH SO TRY AGAIN
                        
                        ;-----------------------------------------------
                        ;Got a good block. See if we've already received
                        ;this block. (It might be a retransmission.) If
                        ;it's the most recently received block, then try
                        ;again - otherwise it's an error.
                        ;-----------------------------------------------
                        ;
                        ; WE HAVE GOT A SECTOR KEEP IT IF IT IS EQUAL = 1 + PREV SECTOR.
                        ; IF DUPLICATE KEEP THE LATEST
                        ;
  07E8   D060 0741      	MOVB	@RECVD_SECT_NO,R1 		;RECEIVED SECTOR NUMBER
  07EC   D020 0743      	MOVB	@SECTNO,R0			;GET PREVIOUS SECTOR NUMBER
  07F0   9001           	CB	R1,R0			;SENDER HAS RESENT THE SAME SECTOR SO PROBABLY MISSED THE ACK, SO RESEND
  07F2   1305           	JEQ	DO_ACK
                        ;	JL	RCV_SEQ_ERROR		;IF LESS WE MAY BE ABLE TO RECOVER USING ACK
  07F4   0220 0100      	AI	R0,1*256			;CALCULATE WHAT SHOULD BE THE NEXT RECORD NUMBER (ADD ONE)
  07F8   9001           	CB	R1,R0			;IF EQUAL THEN THAT IS WHAT WE EXPECTED
  07FA   1308           	JEQ	GOT_RECORD			;MATCH IF SO GOOD AND IN SEQUENCE
  07FC   1006           	JMP	RCV_SEQ_ERROR		;FATAL ERROR AS WE HAVE LOST A RECORD AND CANNOT RECO	
                        ;	JMP	DO_ACK			;WE MIGHT BE ABLE TO RECOVER TO CURRENT POSITION BY SENDING ACKS
                        ;
                        ;ACKNOWLEDGE A GOOD SECTOR AND LOOK FOR NEXT
                        ;
                        DO_ACK:
  07FE   D0A0 073B       	MOVB	@ACK,R2
  0802   2DA0 08C0      	CALL	@TX
  0806   0460 0750      	B	@RECV_LOOP
                        
                        ;
                        ; CHECK FOR FILE NUMBERING ERROR 
                        ;
                        RCV_SEQ_ERROR:
  080A   1012           	JMP	SEQUENCE_ERROR					  
                        ;
                        GOT_RECORD:
  080C   D820 0741      	MOVB	@RECVD_SECT_NO,@SECTNO	;UPDATE SECTOR NUMBER
  0810   0743           
                        ;
                        ; WE HAVE A NEW RECORDS HERE SO WRITE THEM TO DISC
                        ;	
                        ;
  0812   0224 0080      	AI	R4,RECSIZE		;BUMP BUFFER POINTER NOW RECORD IS VALID
  0816   0620 0504      	DEC	@REC_COUNT
  081A   16F1           	JNE	DO_ACK
  081C   2DA0 05D4      	CALL	@WRITE_SECTOR	;WE HAVE RECEIVED TWO RECORDS SO WRITE TO DISC
  0820   0204 0918      	LI	R4,SECTOR_BUFFER	;RESET THE BUFFER POINTER
  0824   05E0 0504      	INCT	@REC_COUNT		;BUMP THE RECORD COUNT BACK UP TO 4
  0828   05E0 0504      	INCT	@REC_COUNT
  082C   10E8           	JMP	DO_ACK
                        ;
  082E   0000           RETRY:	WORD	0
                        ;
                        ; TRY TO ABORT AND ERROR MESSAGE IS POINTED TO BY R3
                        ;
                        
                        
                        SEQUENCE_ERROR:
  0830   0200 0692      	LI	R0,SEQ_ERROR_MSG
  0834   1006           	JMP	LOAD_END
                        
                        SECTOR_ERROR:
  0836   0200 0672      	LI	R0,SECT_ERROR_MSG
  083A   1003           	JMP	LOAD_END
                        
                        WRITE_ERROR:
  083C   0200 0638      	LI	R0,WRITE_MESSAGE
  0840   1000           	JMP	LOAD_END
                        ;
                        ;**************************************************************
                        ;
                        ;	TRY TO TERMINATE THE TRANSFER.  ALSO DELETE THE FILE
                        ;
                        ;***************************************************************
                        ;
  0842   C800 0738      LOAD_END:	MOV	R0,@ERR_MSG_ADDR
                        ;
  0846   D0A0 073F      	MOVB	@CAN,R2		;CANCEL THE TRANSFER
  084A   2DA0 08C0      	CALL	@TX
                        
  084E   0201 0010      LE_1:	LI	R1,16
  0852   2DA0 087A      	CALL	@RECV_WAIT
  0856   9802 0745      	CB	R2,@REC_TIME_OUT	;TIMEOUT ERROR ?
  085A   16F9           	JNE	LE_1
                        
  085C   0202 0013      	LI	R2,ERAFIL 		;PURGE IF AN ERROR
  0860   0203 08F0      	LI	R3,FCB
  0864   2DA0 0084      	CALL	@BDOS
  0868   2FA0 0738      	MESG	@ERR_MSG_ADDR
  086C   0460 0080      	B	@SHELL
                        
                        GOT_EOT:
  0870   D0A0 073B      	MOVB	@ACK,R2
  0874   2DA0 08C0      	CALL	@TX		;SEND ACK RESPONSE
  0878   2DC0            	RET
                        ;
                        ;RX WAIT - CAN TEST FOR TIMEOUT.  TIMEOUT MULTIPLIER IS IN R1
                        ;
  087A   0A81           RECV_WAIT:	SLA	R1,8	        	;TIME OUT FIGURE
  087C   2DA0 088A      SWAIT1:	CALL	@RXSTAT
  0880   1615           	JNE	RX		;GO GET CHAR AND RETURN
  0882   0601           	DEC	R1
  0884   16FB           	JNE	SWAIT1
  0886   0702           	SETO	R2		;SHOW  TIMEOUT ERROR
  0888   2DC0           	RET
                        ;
                        ;	READ CHARACTER STATUS
                        ;
  088A   04C0           RXSTAT:	CLR	R0		;0-> not ready
  088C   020C 0080      	LI	R12,80H
  0890   1F15           	TB	21		;RECEIVE BUFFER REG FULL ?
  0892   1601           	JNE	RX2		;NO
  0894   0580           	INC	R0		;YES
  0896   C000           RX2:	MOV	R0,R0		;SET FLAGS
  0898   2DC0           	RET
                        
                        ; Receive a char in R2 no status checking
                        RX_FLUSH:
  089A   04C0           	CLR	R0
  089C   020C 0080      	LI	R12,80H
  08A0   1F15           RX3	TB	21		;RECEIVE BUFFER REG FULL ?  GET RID OF JUNK
  08A2   13FE           	JEQ	RX3		;NO
  08A4   3602           	STCR	R2,8
  08A6   1E12           	SBZ	18		;SHOW WE RECEIVED CHARACTER
  08A8   C000           	MOV	R0,R0		;SET FLAGS
  08AA   2DC0           	RET
                        
                        ; Receive a char in R2 no status checking
  08AC   04C2           RX:	CLR	R2
  08AE   020C 0080      	LI	R12,80H
  08B2   3602           	STCR	R2,8
  08B4   1E12           	SBZ	18		;SHOW WE RECEIVED CHARACTER
  08B6   2DC0           	RET
                        
                        ;
  08B8   0700           WAIT	SETO	R0
  08BA   0600           WAIT_2	DEC	R0
  08BC   16FE           	JNE	WAIT_2
  08BE   2DC0           	RET
                        ;
                        ; TX A CHAR
                        ;
  08C0   0201 1388      TX	LI	R1,5000
  08C4   020C 0080      	LI	R12,80H
  08C8   2DA0 08DC      TX2	CALL	@TXSTAT
  08CC   1603           	JNE	TX3
  08CE   0601           	DEC	R1
  08D0   16FB           	JNE	TX2		
  08D2   2DC0           	RET			;RETURN WITH ZERO IF TIMEOUT
  08D4   1D10           TX3	SBO	16		;TURN ON THE TRANSMITTER
  08D6   3202           	LDCR	R2,8
  08D8   1E10           	SBZ	16		;TURN OFF TRANSMITTER
  08DA   2DC0           	RET
                        
                        ; TX STATUS
                        ;
  08DC   04C0           TXSTAT	CLR	R0		;0-> not ready
  08DE   020C 0080      	LI	R12,80H
  08E2   1D10           	SBO	16		;TURN ON THE TRANSMITTER
                        TX_STAT1
  08E4   1F16           	TB	22		;WAIT FOR XBRE =1
  08E6   16FE           	JNE	TX_STAT1
  08E8   1E10           	SBZ	16		;TURN OFF TRANSMITTER
  08EA   0580           	INC	R0	
  08EC   C000           	MOV	R0,R0		;set flags
  08EE   2DC0           	RET
                        
                        ;
                        ;	BUFFER AND STACK AREA ETC, BLOCK STARTED FOR SYMBOL
                        ;
  08F0                  FCB:		BSS	36
  0914   0000           LINPTR:		WORD	0
  0916   0918           BUFFER_POINTER:	WORD	SECTOR_BUFFER
                        
  0918                  SECTOR_BUFFER:	BSS	BYTSEC
  0B18   1234           		WORD	1234H
  0B1A                  WORKSP:		BSS	32
  0B3A                  		BSS	32		;ALLOCATE STACK
  0B58                  STACKP:		EQU	$-2
  0B5A                  		EVEN
  0B5A                  	END

No error(s).
MAKMSG           061E  WS_E             05F4  NEXT_CHR         07B8  SECTOR_ERROR     0836  
LE_1             084E  REC_COUNT        0504  WORKSP           0B1A  ERR_MSG_ADDR     0738  
NULL             0740  TX               08C0  MKERR            05A2  RXSTAT           088A  
NAM0             0540  CLOSE_MESSAGE    0700  NAM4             054E  RX3              08A0  
R1               0001  RECV_HDR         0758  R3               0003  SECT_ERROR_MSG   0672  
R5               0005  RECV_FILE        0746  PUSH             2E00  LARGE_FILE_MSG   071C  
R6               0006  R14              000E  RECV_SECT_ERR    0770  CHECKSUM         0744  
R11              000B  RECV_LOOP        0750  SECTNO           0743  STACKP           0B58  
READ             2F40  FTY              000B  GOT_SOH          079C  START            050A  
CMDLINE          00A0  BUFFER_POINTER   0916  MDMMSG           0658  SWITCH           0503  
WRITE            2F00  TX2              08C8  GOT_NAME         0556  GOT_RECORD       080C  
ACK              073B  SWAIT1           087C  SL               0009  CLOSE_FILE       05B6  
WHEX             2E80  SECTOR_BUFFER    0918  RETRY            082E  WRITE_ERROR      083C  
OPEN             000F  TX_STAT1         08E4  RECV_WAIT        087A  R15              000F  
LINPTR           0914  CLS_1            05C0  DO_ACK           07FE  ERAFIL           0013  
CMD_ERROR        0506  START01          051E  R13              000D  EXIT             05CE  
REC_TIME_OUT     0745  LOAD_END         0842  NAM              0000  POP              2E40  
SOH              073C  FLA              0010  R0               0000  TXSTAT           08DC  
R4               0004  FSZ              000E  R7               0007  RHEX             2EC0  
WRITE_MESSAGE    0638  ETB              073E  NAMSIZ           000B  CALL             2D80  
RX               08AC  TX3              08D4  WRITE_SECTOR     05D4  CRLF             05F8  
FCLOSE           0010  MESG             2F80  RECVD_SECT_NO    0741  SPACE            0502  
WAIT_2           08BA  WAIT             08B8  RX_FLUSH         089A  START02          0528  
RET              2DC0  MAKFIL           0016  RHNTO            078E  FCB              08F0  
SHELL            0080  SELDSK           000E  R2               0002  SEQ_ERROR_MSG    0692  
R8               0008  FSB              000C  RCV_SEQ_ERROR    080A  NAK              073A  
VERSION          06C6  WRSEQ            0015  SP               000A  CMDERR           05AA  
TPA              0500  EOT              073D  SETDMA           001A  CAN              073F  
SEQUENCE_ERROR   0830  RECSIZE          0080  SUCCESS          06F4  CRN              001A  
RX2              0896  COMP_REC_NO      0742  R12              000C  SAVING           06E4  
END_MESSAGE      06BA  GOT_EOT          0870  CMDMSG           05FC  BDOS             0084  
BYTSEC           0200  
